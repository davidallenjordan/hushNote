{"version":3,"sources":["Header.js","firebase.js","Form.js","CardStack.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Form","handleChange","event","characterLimiter","setState","userInput","target","value","handleClick","preventDefault","state","inputTooShort","inputTooLong","database","ref","push","length","className","onChange","this","action","htmlFor","type","name","id","aria-label","placeholder","onClick","Component","CardStack","submission","key","child","remove","map","deleteNote","note","on","response","newState","data","val","Footer","class","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1d21502.chunk.js","sourcesContent":["import React from 'react';\n\n// Header title and explanation of app\n\nconst Header = () => {\n    return (\n\n      <header>\n\n          <h1>hush note</h1>\n          <h2>A place to put a secret, confess a desire, or tell a truth</h2>\n  \n      </header>\n    )\n  \n}\n\nexport default Header;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyASJzJUSDMUS6g1q-ApfLiMaFpwH2Mm7Tg\",\n  authDomain: \"hushnote-96564.firebaseapp.com\",\n  databaseURL: \"https://hushnote-96564.firebaseio.com\",\n  projectId: \"hushnote-96564\",\n  storageBucket: \"hushnote-96564.appspot.com\",\n  messagingSenderId: \"595951103889\",\n  appId: \"1:595951103889:web:6a7d51641940a61007f430\",\n  measurementId: \"G-77XF10DKMN\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\n\n// The Form Component to take user input, handle errors and pass state to CardStack.js\n\n// Setting state for user input and character limit error handling\nclass Form extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      userInput: '',\n      inputTooShort: true,\n      inputTooLong: false\n    }\n\n  }\n\n  // Tracks character input and checks state\n  handleChange = (event) => {\n    this.characterLimiter();\n\n      this.setState({\n        userInput: event.target.value\n      }) \n    \n  }\n\n  // Submits the note if the character requirements are met\n  handleClick = (event) => {\n    event.preventDefault();\n\n    if (!this.state.inputTooShort || !this.state.inputTooLong) {\n      const dbRef = firebase.database().ref();\n      dbRef.push(this.state.userInput);\n\n      this.setState({\n        userInput: ''\n      })\n    } \n\n  }\n\n  // Updates the state for the character count \n  characterLimiter = () => {\n\n    if (this.state.userInput.length > 106) {\n      this.setState({\n        inputTooLong: true\n      })\n    } else {\n      this.setState({\n        inputTooLong: false\n      })\n\n    }\n    \n    if (this.state.userInput.length < 30) {\n      this.setState({\n        inputTooShort: true\n      })\n    } else {\n      this.setState({\n        inputTooShort: false\n      })\n    }\n  }\n\n  // JSX to check character limit states and display messages accordingly\n  // Button is disabled untill character sweet spot is met\n  render() {\n    return (\n\n      <section className=\"formContainer\">\n  \n        <form onChange={this.handleChange} action=\"submit\">\n  \n          <label className=\"srOnly\" htmlFor=\"note\">Write your note here</label>\n\n          <div className=\"characterLimitMsg\">\n\n            {\n              this.state.inputTooShort \n              ? <p>The note is too short, please type more</p>\n              : null\n            }\n            {\n              this.state.inputTooLong\n              ? <p>The note is too long, please type less</p>\n              : null\n            }\n\n          </div>\n            \n          <textarea type=\"text\" name=\"Note\" id=\"note\" aria-label=\"Write here\" \n            value={this.state.userInput} onChange={this.handleChange} placeholder=\"start writing here...\">\n          </textarea>\n\n          {\n            this.state.inputTooShort || this.state.inputTooLong\n            ? <button onClick={ (event) => event.preventDefault() } aria-label=\"note must be between 30 and 100 characters to submit\">Write Note</button>\n            : <button onClick={this.handleClick} type=\"submit\">Write Note</button>\n          }\n  \n        </form>\n  \n      </section>\n    \n    )\n  }\n\n  // End of Component\n}\n\nexport default Form;\n\n","import React, { Component } from 'react';\nimport firebase from './firebase';\n\n// Displays all user entries on the page\n\n// New array for user input / submission\nclass CardStack extends Component {\n  constructor() {\n    super();\n\n      this.state = {\n        submission: []\n      }\n\n  }\n\n\n  // Deletes note from firebase\n  deleteNote(key) {\n    const dbRef = firebase.database().ref();\n    dbRef.child(key).remove();\n  }\n\n  // Maps the user input and appends onto page\n  // Delete function called inside button click\n  render () {\n    return (\n      <section className=\"cardStack\">\n        <ul>\n\n          {this.state.submission.map((submission) => {\n            return (\n              <li className=\"cardContainer\" key={submission.key}>\n                <button onClick={() => this.deleteNote(submission.key)} aria-label=\"Delete Card\"><i className=\"fas fa-times\"></i></button>\n                <p>{submission.note}</p>\n              </li>\n            )\n          })}\n\n        </ul>\n      </section>\n    )\n\n  }\n  \n  // Pushes the user input onto firebase\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) => {\n      const newState = [];\n\n      const data = response.val();\n\n      for (let key in data) {\n        newState.push({ key: key, note: data[key] });\n      }\n\n      this.setState({\n        submission: newState\n      });\n\n    })\n  }\n\n// End of Component\n}\n\nexport default CardStack;\n","import React from 'react';\n\n// Just some social links\nconst Footer = () => {\n  return (\n\n    <footer>\n\n      <p><i class=\"far fa-copyright\"></i> 2020 David Allen-Jordan</p>\n      \n      <div className=\"socialLinks\">\n        <a aria-label=\"git hub\" href=\"https://github.com/davidallenjordan\"><i class=\"fab fa-github\"></i></a>\n        <a aria-label=\"twitter\" href=\"https://twitter.com/davidaj416\"><i class=\"fab fa-twitter\"></i></a>\n        <a aria-label=\"linkedin\" href=\"https://www.linkedin.com/in/david-allen-jordan-3475151b1/\"><i class=\"fab fa-linkedin-in\"></i></a>\n      </div>      \n\n    </footer>\n\n  )\n}\n\nexport default Footer;","import React, { Fragment } from 'react';\nimport Header from './Header';\nimport Form from './Form';\nimport CardStack from './CardStack';\nimport Footer from './Footer';\n\n// All the components are collected and displayed to the page\nconst App = () => {\n\n  return (\n    <Fragment>\n\n      <div className=\"wrapper\">\n\n        <div className=\"layoutContainer\">\n          <Header />\n          <Form />\n        </div>\n\n        <CardStack />\n\n      </div>\n\n      <Footer />\n\n    </Fragment>\n  )\n}\n\n  \n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}