{"version":3,"sources":["Header.js","firebase.js","Form.js","CardStack.js","App.js","serviceWorker.js","index.js"],"names":["Header","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Form","handleChange","event","state","inputTooShort","characterLimit","setState","userInput","target","value","handleClick","preventDefault","database","ref","push","length","inputTooLong","className","onChange","this","action","htmlFor","type","name","id","aria-label","placeholder","onClick","Component","CardStack","submission","key","child","remove","map","deleteNote","note","on","response","newState","data","val","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAeeA,G,MAbA,WACX,OAEE,gCAEI,yCACA,6F,kDCMVC,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMFT,QAAf,ECgFeU,E,kDA7Fb,aAAe,IAAD,8BACZ,gBAaFC,aAAe,SAACC,GACV,EAAKC,MAAMC,eACb,EAAKC,iBAEL,EAAKC,SAAS,CACZC,UAAWL,EAAMM,OAAOC,SAnBhB,EAwBdC,YAAc,SAACR,GACbA,EAAMS,iBAEN,EAAKN,iBAESf,EAASsB,WAAWC,MAC5BC,KAAK,EAAKX,MAAMI,WAGtB,EAAKD,SAAS,CACZC,UAAW,MAlCD,EAwCdF,eAAiB,WAEX,EAAKF,MAAMI,UAAUQ,OAAS,KAChC,EAAKT,SAAS,CACZU,cAAc,IAId,EAAKb,MAAMI,UAAUQ,OAAS,IAChC,EAAKT,SAAS,CACZF,eAAe,KA/CnB,EAAKD,MAAQ,CACXI,UAAW,GACXH,eAAe,EACfY,cAAc,GANJ,E,qDAyDZ,OAEE,6BAASC,UAAU,iBAEjB,0BAAMC,SAAUC,KAAKlB,aAAcmB,OAAO,UAExC,2BAAOH,UAAU,SAASI,QAAQ,QAAlC,wBAGEF,KAAKhB,MAAMC,cACT,sEACA,KAGFe,KAAKhB,MAAMa,aACT,qEACA,KAIF,8BAAUM,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAAOC,aAAW,aACrDhB,MAAOU,KAAKhB,MAAMI,UAClBW,SAAUC,KAAKlB,aAAcyB,YAAY,qBAE7C,4BAAQC,QAASR,KAAKT,YAAaY,KAAK,UAAxC,oB,GAlFSM,aC4DJC,E,kDA1Db,aAAe,IAAD,8BACZ,gBAEO1B,MAAQ,CACX2B,WAAY,IAJJ,E,uDAUHC,GACKzC,EAASsB,WAAWC,MAC5BmB,MAAMD,GAAKE,W,+BAIR,IAAD,OACR,OACE,6BAAShB,UAAU,aACjB,4BAEGE,KAAKhB,MAAM2B,WAAWI,KAAI,SAACJ,GAC1B,OACE,wBAAIb,UAAU,gBAAgBc,IAAKD,EAAWC,KAC5C,4BAAQJ,QAAS,kBAAM,EAAKQ,WAAWL,EAAWC,MAAMN,aAAW,eAAc,uBAAGR,UAAU,kBAC9F,2BAAIa,EAAWM,c,0CAWR,IAAD,OACJ9C,EAASsB,WAAWC,MAE5BwB,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAW,GAEXC,EAAOF,EAASG,MAEtB,IAAK,IAAIV,KAAOS,EACdD,EAASzB,KAAK,CAAEiB,IAAKA,EAAKK,KAAMI,EAAKT,KAGvC,EAAKzB,SAAS,CACZwB,WAAYS,W,GAlDIX,aC2BTc,EA1BH,WAER,OAGE,yBAAKzB,UAAU,WAIX,yBAAKA,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGF,kBAAC,EAAD,QCPU0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d3deb85.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n\n      <header>\n\n          <h1>hush note</h1>\n          <h2>A place to put a secret, confess a desire, or tell a truth</h2>\n  \n      </header>\n    )\n  \n}\n\nexport default Header;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyASJzJUSDMUS6g1q-ApfLiMaFpwH2Mm7Tg\",\n  authDomain: \"hushnote-96564.firebaseapp.com\",\n  databaseURL: \"https://hushnote-96564.firebaseio.com\",\n  projectId: \"hushnote-96564\",\n  storageBucket: \"hushnote-96564.appspot.com\",\n  messagingSenderId: \"595951103889\",\n  appId: \"1:595951103889:web:6a7d51641940a61007f430\",\n  measurementId: \"G-77XF10DKMN\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\n\nclass Form extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      userInput: '',\n      inputTooShort: true,\n      inputTooLong: false\n    }\n\n\n\n  }\n\n\n  handleChange = (event) => {\n    if (this.state.inputTooShort) {\n      this.characterLimit();\n    }\n      this.setState({\n        userInput: event.target.value\n      }) \n    \n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n\n    this.characterLimit();\n\n    const dbRef = firebase.database().ref();\n    dbRef.push(this.state.userInput);\n\n\n    this.setState({\n      userInput: ''\n    })\n  }\n\n\n\n  characterLimit = () => {\n\n    if (this.state.userInput.length > 120) {\n      this.setState({\n        inputTooLong: true\n      })\n    }\n    \n    if (this.state.userInput.length < 40) {\n      this.setState({\n        inputTooShort: true\n      })\n    }\n  }\n\n  \n  render() {\n    return (\n\n      <section className=\"formContainer\">\n  \n        <form onChange={this.handleChange} action=\"submit\">\n  \n          <label className=\"srOnly\" htmlFor=\"note\">Write your note here</label>\n\n          {\n            this.state.inputTooShort \n            ? <p>The note is too short, please type more</p>\n            : null\n          }\n          {\n            this.state.inputTooLong\n            ? <p>The note is too long, please type less</p>\n            : null\n          }\n\n            \n            <textarea type=\"text\" name=\"Note\" id=\"note\" aria-label=\"Write here\"\n              value={this.state.userInput}\n              onChange={this.handleChange} placeholder=\"start writing...\"></textarea>\n  \n          <button onClick={this.handleClick} type=\"submit\">Write Note</button>\n  \n        </form>\n  \n      </section>\n    \n    )\n  }\n\n\n}\n\nexport default Form;\n\n","import React, { Component } from 'react';\nimport firebase from './firebase';\n\n\nclass CardStack extends Component {\n  constructor() {\n    super();\n\n      this.state = {\n        submission: []\n      }\n\n  }\n\n\n  deleteNote(key) {\n    const dbRef = firebase.database().ref();\n    dbRef.child(key).remove();\n  }\n\n\n  render () {\n    return (\n      <section className=\"cardStack\">\n        <ul>\n\n          {this.state.submission.map((submission) => {\n            return (\n              <li className=\"cardContainer\" key={submission.key}>\n                <button onClick={() => this.deleteNote(submission.key)} aria-label=\"Delete Card\"><i className=\"fas fa-times\"></i></button>\n                <p>{submission.note}</p>\n              </li>\n            )\n          })}\n\n        </ul>\n      </section>\n    )\n  }\n\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) => {\n      const newState = [];\n\n      const data = response.val();\n\n      for (let key in data) {\n        newState.push({ key: key, note: data[key] });\n      }\n\n      this.setState({\n        submission: newState\n      });\n\n    })\n  }\n\n\n}\n\nexport default CardStack;\n","import React from 'react';\nimport Header from './Header';\nimport Form from './Form';\nimport CardStack from './CardStack';\n\nconst App = () => {\n\n    return (\n      // <div className=\"backgroundContainer\">\n\n      <div className=\"wrapper\">\n\n        {/* <div className=\"flexContainer\"> */}\n\n          <div className=\"layoutContainer\">\n            <Header />\n            <Form />\n          </div>\n\n          <CardStack />\n\n        </div>\n\n      // </div>\n\n      // </div>\n    )\n}\n\n  \n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}